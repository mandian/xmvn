diff --git a/pom.xml b/pom.xml
index 1fafb2f..a176d2d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -40,6 +40,7 @@
     <module>xmvn-launcher</module>
     <module>xmvn-core</module>
     <module>xmvn-connector-aether</module>
+    <module>xmvn-connector-gradle</module>
     <module>xmvn-connector-ivy</module>
     <module>xmvn-mojo</module>
     <module>xmvn-tools</module>
diff --git a/xmvn-connector-gradle/pom.xml b/xmvn-connector-gradle/pom.xml
new file mode 100644
index 0000000..b8bcb54
--- /dev/null
+++ b/xmvn-connector-gradle/pom.xml
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="US-ASCII"?>
+<!--
+ ! Copyright (c) 2012-2015 Red Hat, Inc.
+ !
+ ! Licensed under the Apache License, Version 2.0 (the "License");
+ ! you may not use this file except in compliance with the License.
+ ! You may obtain a copy of the License at
+ !
+ !     http://www.apache.org/licenses/LICENSE-2.0
+ !
+ ! Unless required by applicable law or agreed to in writing, software
+ ! distributed under the License is distributed on an "AS IS" BASIS,
+ ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ ! See the License for the specific language governing permissions and
+ ! limitations under the License.
+ `-->
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
+                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <artifactId>xmvn-parent</artifactId>
+    <groupId>org.fedoraproject.xmvn</groupId>
+    <version>2.2.0-SNAPSHOT</version>
+    <relativePath>../xmvn-parent</relativePath>
+  </parent>
+  <artifactId>xmvn-connector-gradle</artifactId>
+  <name>XMvn Connector for Gradle</name>
+  <description>
+    XMvn Connector for Gradle provides integration of Gradle with
+    XMvn.  It provides an adapter which allows XMvn resolver to be
+    used as Gradle resolver.
+  </description>
+  <dependencies>
+    <dependency>
+      <groupId>org.fedoraproject.xmvn</groupId>
+      <artifactId>xmvn-api</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.fedoraproject.xmvn</groupId>
+      <artifactId>xmvn-launcher</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.slf4j</groupId>
+      <artifactId>slf4j-api</artifactId>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.gradle</groupId>
+      <artifactId>gradle-base-services</artifactId>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.gradle</groupId>
+      <artifactId>gradle-core</artifactId>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.gradle</groupId>
+      <artifactId>gradle-dependency-management</artifactId>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.gradle</groupId>
+      <artifactId>gradle-resources</artifactId>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.ivy</groupId>
+      <artifactId>ivy</artifactId>
+      <scope>provided</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/xmvn-connector-gradle/src/main/java/org/fedoraproject/xmvn/connector/gradle/GradleResolver.java b/xmvn-connector-gradle/src/main/java/org/fedoraproject/xmvn/connector/gradle/GradleResolver.java
new file mode 100644
index 0000000..d523eaa
--- /dev/null
+++ b/xmvn-connector-gradle/src/main/java/org/fedoraproject/xmvn/connector/gradle/GradleResolver.java
@@ -0,0 +1,374 @@
+/*-
+ * Copyright (c) 2014-2015 Red Hat, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.fedoraproject.xmvn.connector.gradle;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Collections;
+import java.util.LinkedHashSet;
+import java.util.Set;
+
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+
+import org.fedoraproject.xmvn.artifact.Artifact;
+import org.fedoraproject.xmvn.artifact.DefaultArtifact;
+import org.fedoraproject.xmvn.locator.IsolatedXMvnServiceLocator;
+import org.fedoraproject.xmvn.locator.XMvnHomeClassLoader;
+import org.fedoraproject.xmvn.resolver.ResolutionRequest;
+import org.fedoraproject.xmvn.resolver.ResolutionResult;
+import org.fedoraproject.xmvn.resolver.Resolver;
+import org.gradle.api.artifacts.ModuleVersionIdentifier;
+import org.gradle.api.artifacts.component.ModuleComponentIdentifier;
+import org.gradle.api.artifacts.repositories.ArtifactRepository;
+import org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ConfiguredModuleComponentRepository;
+import org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ModuleComponentRepositoryAccess;
+import org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.DescriptorParseContext;
+import org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser;
+import org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.MetaDataParser;
+import org.gradle.api.internal.artifacts.repositories.ResolutionAwareRepository;
+import org.gradle.api.internal.component.ArtifactType;
+import org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetaData;
+import org.gradle.internal.component.external.model.DefaultModuleComponentArtifactMetaData;
+import org.gradle.internal.component.external.model.ModuleComponentResolveMetaData;
+import org.gradle.internal.component.external.model.MutableModuleComponentResolveMetaData;
+import org.gradle.internal.component.model.ComponentArtifactMetaData;
+import org.gradle.internal.component.model.ComponentResolveMetaData;
+import org.gradle.internal.component.model.ComponentUsage;
+import org.gradle.internal.component.model.DefaultIvyArtifactName;
+import org.gradle.internal.component.model.DependencyMetaData;
+import org.gradle.internal.component.model.IvyArtifactName;
+import org.gradle.internal.component.model.ModuleSource;
+import org.gradle.internal.resolve.ArtifactResolveException;
+import org.gradle.internal.resolve.ModuleVersionResolveException;
+import org.gradle.internal.resolve.result.BuildableArtifactResolveResult;
+import org.gradle.internal.resolve.result.BuildableArtifactSetResolveResult;
+import org.gradle.internal.resolve.result.BuildableModuleComponentMetaDataResolveResult;
+import org.gradle.internal.resolve.result.BuildableModuleComponentVersionSelectionResolveResult;
+import org.gradle.internal.resource.DefaultLocallyAvailableExternalResource;
+import org.gradle.internal.resource.LocallyAvailableExternalResource;
+import org.gradle.internal.resource.local.DefaultLocallyAvailableResource;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.w3c.dom.Document;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+
+/**
+ * @author Mikolaj Izdebski
+ */
+public class GradleResolver
+    implements ArtifactRepository, ResolutionAwareRepository, ConfiguredModuleComponentRepository,
+    ModuleComponentRepositoryAccess, DescriptorParseContext
+{
+    private final Logger logger = LoggerFactory.getLogger( GradleResolver.class );
+
+    static class LazyLocatorProvider
+    {
+        static final IsolatedXMvnServiceLocator locator;
+
+        static
+        {
+            XMvnHomeClassLoader realm = new XMvnHomeClassLoader( LazyLocatorProvider.class.getClassLoader() );
+            realm.importAllPackages( "org.slf4j" );
+            realm.importAllPackages( "org.gradle.api.logging" );
+            locator = new IsolatedXMvnServiceLocator( realm );
+        }
+    }
+
+    static class LazyResolverProvider
+    {
+        static final Resolver resolver = LazyLocatorProvider.locator.getService( Resolver.class );
+    }
+
+    private Path resolve( Artifact artifact )
+    {
+        logger.debug( "Trying to resolve artifact {}", artifact );
+        ResolutionRequest request = new ResolutionRequest( artifact );
+        Resolver resolver = LazyResolverProvider.resolver;
+        ResolutionResult result = resolver.resolve( request );
+        return result.getArtifactPath();
+    }
+
+    private String name;
+
+    @Override
+    public String getName()
+    {
+        return name;
+    }
+
+    @Override
+    public void setName( String name )
+    {
+        this.name = name;
+    }
+
+    @Override
+    public ConfiguredModuleComponentRepository createResolver()
+    {
+        return this;
+    }
+
+    @Override
+    public String getId()
+    {
+        return "XMvn";
+    }
+
+    @Override
+    public ModuleComponentRepositoryAccess getLocalAccess()
+    {
+        return this;
+    }
+
+    @Override
+    public ModuleComponentRepositoryAccess getRemoteAccess()
+    {
+        return this;
+    }
+
+    @Override
+    public boolean isDynamicResolveMode()
+    {
+        return false;
+    }
+
+    @Override
+    public boolean isLocal()
+    {
+        return true;
+    }
+
+    @Override
+    public void listModuleVersions( DependencyMetaData arg0, BuildableModuleComponentVersionSelectionResolveResult arg1 )
+    {
+        logger.debug( "listModuleVersions() called, but it is NOT IMPLEMENTED" );
+    }
+
+    @Override
+    public void resolveArtifact( ComponentArtifactMetaData artifact, ModuleSource module,
+                                 BuildableArtifactResolveResult result )
+    {
+
+        ModuleVersionIdentifier moduleId =
+            ( (DefaultModuleComponentArtifactMetaData) artifact ).toArtifactIdentifier().getModuleVersionIdentifier();
+        String groupId = moduleId.getGroup();
+        String artifactId = artifact.getName().getName();
+        String extension = artifact.getName().getExtension();
+        String classifier = artifact.getName().getClassifier();
+        String version = moduleId.getVersion();
+
+        Artifact artifact2 = new DefaultArtifact( groupId, artifactId, extension, classifier, version );
+        Path path = resolve( artifact2 );
+
+        if ( path == null )
+        {
+            logger.debug( "Unable to resolve artifact {}", artifact2 );
+            result.failed( new ArtifactResolveException( artifact.getId(), "XMvn was unable to resolve artifact "
+                + artifact2 ) );
+            return;
+        }
+
+        // Gradle expects resolved file to be named like in Maven/Ivy repo...
+        try
+        {
+            Path dir = Files.createTempDirectory( "xmvn-gradle-" );
+            String baseName =
+                artifact2.getArtifactId() + "-" + artifact2.getVersion()
+                    + ( artifact2.getClassifier().isEmpty() ? "" : "-" + artifact2.getClassifier() ) + "."
+                    + artifact2.getExtension();
+            Path origpPath = path;
+            path = dir.resolve( baseName );
+            Files.createSymbolicLink( path, origpPath );
+        }
+        catch ( IOException e )
+        {
+            throw new RuntimeException( e );
+        }
+
+        logger.debug( "Artifact {} was resolved to {}", artifact2, path );
+        result.resolved( path.toFile() );
+    }
+
+    @Override
+    public void resolveComponentMetaData( DependencyMetaData dependency, ModuleComponentIdentifier id,
+                                          BuildableModuleComponentMetaDataResolveResult result )
+    {
+        logger.debug( "Trying to resolve model for {}:{}:{}", id.getGroup(), id.getModule(), id.getVersion() );
+
+        Artifact artifact2 = new DefaultArtifact( id.getGroup(), id.getModule(), "pom", id.getVersion() );
+        Path pomPath = resolve( artifact2 );
+
+        if ( pomPath != null )
+        {
+            logger.debug( "Found Maven POM: {}", pomPath );
+            Path fakePom = fakePom( pomPath, id );
+            logger.debug( "Created fake POM: {}", fakePom );
+
+            MetaDataParser parser = new GradlePomModuleDescriptorParser();
+            MutableModuleComponentResolveMetaData metaData = parser.parseMetaData( this, fakePom.toFile() );
+
+            result.resolved( metaData );
+            return;
+        }
+        else
+        {
+            logger.debug( "POM not found, trying non-POM artifacts" );
+            for ( IvyArtifactName artifact : getDependencyArtifactNames( dependency ) )
+            {
+                String groupId = id.getGroup();
+                String artifactId = artifact.getName();
+                String extension = artifact.getExtension();
+                String classifier = artifact.getClassifier();
+                String version = id.getVersion();
+
+                Artifact artifact3 = new DefaultArtifact( groupId, artifactId, extension, classifier, version );
+                Path path = resolve( artifact3 );
+
+                if ( path != null )
+                {
+                    logger.debug( "Artifact {} found, returning minimal model", artifact3 );
+                    MutableModuleComponentResolveMetaData metaData = new DefaultMavenModuleResolveMetaData( dependency );
+                    result.resolved( metaData );
+                    return;
+                }
+            }
+        }
+
+        logger.debug( "No POM and no artifact found, failing" );
+        result.failed( new ModuleVersionResolveException( id, "XMvn was unable to resolve artifact " + artifact2 ) );
+    }
+
+    private Set<IvyArtifactName> getDependencyArtifactNames( DependencyMetaData dependency )
+    {
+        String moduleName = dependency.getRequested().getName();
+        Set<IvyArtifactName> artifactSet = new LinkedHashSet<>();
+        artifactSet.addAll( dependency.getArtifacts() );
+
+        if ( artifactSet.isEmpty() )
+        {
+            artifactSet.add( new DefaultIvyArtifactName( moduleName, "jar", "jar",
+                                                         Collections.<String, String> emptyMap() ) );
+        }
+
+        return artifactSet;
+    }
+
+    private static void setElement( Document doc, String name, String value )
+    {
+        NodeList childreen = doc.getDocumentElement().getChildNodes();
+        for ( int i = 0; i < childreen.getLength(); i++ )
+        {
+            Node child = childreen.item( i );
+            if ( child.getNodeName().equals( name ) )
+            {
+                child.setTextContent( value );
+                return;
+            }
+        }
+
+        Node child = doc.createElement( name );
+        child.setTextContent( value );
+        doc.getDocumentElement().appendChild( child );
+    }
+
+    private static Path fakePom( Path pom, ModuleComponentIdentifier moduleVersionIdentifier )
+    {
+        try
+        {
+            DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
+            Document doc = domFactory.newDocumentBuilder().parse( pom.toFile() );
+            setElement( doc, "groupId", moduleVersionIdentifier.getGroup() );
+            setElement( doc, "artifactId", moduleVersionIdentifier.getModule() );
+            setElement( doc, "version", moduleVersionIdentifier.getVersion() );
+
+            NodeList dependencies = doc.getElementsByTagName( "dependency" );
+            outer: for ( int i = 0; i < dependencies.getLength(); i++ )
+            {
+                Node dependency = dependencies.item( i );
+                NodeList childreen = dependency.getChildNodes();
+                for ( int j = 0; j < childreen.getLength(); j++ )
+                {
+                    Node child = childreen.item( j );
+                    if ( child.getNodeName().equals( "version" ) )
+                        continue outer;
+                }
+
+                Node child = doc.createElement( "version" );
+                child.setTextContent( "SYSTEM" );
+                dependency.appendChild( child );
+            }
+
+            TransformerFactory transformerFactory = TransformerFactory.newInstance();
+            Transformer transformer = transformerFactory.newTransformer();
+            transformer.setOutputProperty( OutputKeys.INDENT, "yes" );
+            DOMSource source = new DOMSource( doc );
+
+            Path fakePom = Files.createTempFile( "xmvn-", ".gradle.pom" );
+            StreamResult file = new StreamResult( fakePom.toFile() );
+            transformer.transform( source, file );
+            return fakePom;
+        }
+        catch ( Exception e )
+        {
+            throw new RuntimeException( e );
+        }
+    }
+
+    @Override
+    public void resolveModuleArtifacts( ComponentResolveMetaData component, ComponentUsage usage,
+                                        BuildableArtifactSetResolveResult result )
+    {
+        result.resolved( Collections.singleton( ( (ModuleComponentResolveMetaData) component ).artifact( "jar", "jar",
+                                                                                                         null ) ) );
+    }
+
+    @Override
+    public void resolveModuleArtifacts( ComponentResolveMetaData component, ArtifactType type,
+                                        BuildableArtifactSetResolveResult result )
+    {
+        if ( type != ArtifactType.MAVEN_POM )
+        {
+            logger.debug( "resolveModuleArtifacts() called for artifact type {}", type );
+            result.failed( new ArtifactResolveException( "resolveModuleArtifacts() is implemended only for Maven POMs" ) );
+            return;
+        }
+
+        ModuleComponentResolveMetaData metaData = (ModuleComponentResolveMetaData) component;
+        ModuleComponentIdentifier id = metaData.getComponentId();
+        DefaultIvyArtifactName name = new DefaultIvyArtifactName( id.getModule(), "pom", "pom" );
+        DefaultModuleComponentArtifactMetaData resolvedMetaData = new DefaultModuleComponentArtifactMetaData( id, name );
+        result.resolved( Collections.singleton( resolvedMetaData ) );
+    }
+
+    @Override
+    public LocallyAvailableExternalResource getMetaDataArtifact( ModuleVersionIdentifier id, ArtifactType type )
+    {
+        Path pomPath = resolve( new DefaultArtifact( id.getGroup(), id.getName(), "pom", id.getVersion() ) );
+
+        if ( pomPath == null )
+            return null;
+
+        return new DefaultLocallyAvailableExternalResource( pomPath.toUri(),
+                                                            new DefaultLocallyAvailableResource( pomPath.toFile() ) );
+    }
+}
diff --git a/xmvn-parent/pom.xml b/xmvn-parent/pom.xml
index 709ad5a..3e167f2 100644
--- a/xmvn-parent/pom.xml
+++ b/xmvn-parent/pom.xml
@@ -80,6 +80,7 @@
     <ivyVersion>2.3.0</ivyVersion>
     <equinoxVersion>3.4.0.v20140613-1134</equinoxVersion>
     <jcommanderVersion>1.32</jcommanderVersion>
+    <gradleVersion>2.2.1</gradleVersion>
     <guiceVersion>3.1.8</guiceVersion>
     <guavaVersion>17.0</guavaVersion>
     <mavenInvokerVersion>2.1.1</mavenInvokerVersion>
@@ -269,6 +270,26 @@
         <groupId>org.eclipse.osgi</groupId>
         <artifactId>org.eclipse.osgi</artifactId>
         <version>${equinoxVersion}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.gradle</groupId>
+        <artifactId>gradle-base-services</artifactId>
+        <version>${gradleVersion}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.gradle</groupId>
+        <artifactId>gradle-core</artifactId>
+        <version>${gradleVersion}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.gradle</groupId>
+        <artifactId>gradle-dependency-management</artifactId>
+        <version>${gradleVersion}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.gradle</groupId>
+        <artifactId>gradle-resources</artifactId>
+        <version>${gradleVersion}</version>
       </dependency>
     </dependencies>
   </dependencyManagement>
